Hummer Ultra Sound for NeoGS

В 2010 году я узнал, что NedoPC сделала современный клон General Sound-а на базе FPGA.
Первое, что я сделал - это спросил на форуме группы, реализовали ли они цифровой синтез сэмплов аппаратно?
Ответ был - нет, в NeoGS работает старая прошивка GS, да это еще и является предметом особой гордости. Соместимость, однако.
Z80 продолжает адово нарубать сэмплы, но теперь все стало дваноль, то есть частоту подняли до 24МГц.
Я написал вброс на тему создания конфигурации, где все будет по-человечески, и плотно задумал недоброе.

Четыре года я порывался накодить что-нибудь на эту тему, но каждый раз выходили то спрайты, то форумы.
Концепт конфигурации никак не складывался.
Наконец произошел insight, хорошо известное в психологии явление, и мозаика сложилась. И вот что получилось.

В качестве условного целевого формата звука я прикинул XM.
Этот относительно несложный, но обладающий неплохими возможностями формат трекерной музыки представлен сотнями тысяч готовых модулей и удобными тулзами для редактирования на РС.
Железо, задуманное для воспроизведения ХМ, должно уметь следующие вещи:
- смешивать до 32 каналов цифрового звука,
- поддерживать несколько режимов loop и различные типы сэмплов,
- поддерживать задание громкости независимо для левого/правого стереоканала в каждом канале смешивания,
- успевать обрабатывать нотные паттерны,
- иметь достаточный объем памяти, желательно несколько мегабайт.

NeoGS содержит на борту FPGA... пардон, Acex, SRAM 4МБ и процессор... пардон, Z80 на частоте 24МГц.
Миксом каналов должна заниматься FPGA, процессор должен парсить паттерны и программировать аудио-чип.
SRAM имеет время доступа 15нс, что замечательно, но чтоб жизнь не казалась мёдом, её шины соединены с шинами Z80, поэтому FPGA должна использовать доступ к SRAM через BUSRQ.

В дизайне есть много узких мест, а именно:
- количество тактов на обработку 30+ каналов с частотой CD (44100Гц) у FPGA вполне конечно, и составляет в среднем 15 тактов на канал,
- имеется торможение процессора при обращениям чипа к памяти,
- процессор должен успевать обрабатывать плеер, а это крайне неравномерный по нагрузке процесс и зависит от проигрываемого участка.

В результате я спланировал систему так, чтоб в любых местах нагрузка распределялась равномерно и был запас по выхлопу.

Напомню, что трекерные музоны устроены по схеме: паттерн - нота - тик. Тик по умолчанию соответствует 1/50 секунды, в ноте по умолчанию 6 тиков.
Вначале плеер заготавливает наперед несколько массивов таблиц каналов аудиочипа по 512 байт, по одному на тик.
Проц загружает первую таблицу и запускает аудиочип.
Чип нарезает FIFO звука, из которого питается аудио ЦАП, и работает до конца тика, после чего пинает проц прерыванием.
В момент окончания нарезки звуковое FIFO набито под завязку, и его глубина (128 выборок), помноженная на период одной выборки на аудиочастоте, задает период времени, за который процессор обязан перезагрузить аудиочип новыми значениями для следующего тика.
Длина тика задается в выборках, например, для BPM 125 и аудио 44.1кГц это: 44100/50=882 выборки.
Процессор, который все это время не читал хайп, а наоборот парсил ноты, бросает все и мчится перегружать таблицу каналов, из заранее, что важно, заготовленной кучи.
Период, за который надо все успеть - это 68 тысяч тактов, чего достаточно даже для переброски LDIR-ом, хотя приветствуется DMA, которая это сделает быстрее.

Таблица каналов содержит следующие параметры для каждого канала:
- адрес начала сэмпла в памяти (все адреса физические в пределах 4МБ),
- адрес конца проигрывания,
- адрес начала петли,
- режим петли (одиночное проигрывание, петля вперед, двунаправленная петля либо канал выключен),
- формат сэмпла (8/16 бит, моно/стерео, signed/unsigned),
- нота (об этом чуть ниже),
- громкость в левом/правом стереоканалах.

Кроме самой таблицы требуются флаги для указания, какие из каналов нужно перезапустить с начального адреса (retrigger).
Другие будут продолжать играть с того же места, возможно, с измененными параметрами громкости и частоты.

Отдельно нужно рассказать про масштабирование сэмплов под нужную ноту звучания.
Поскольку выборка всех каналов происходит с одинаковой частотой, единственный способ изменять ноту - это двигаться по сэмплу с дробным шагом.
Для этого предусмотрено 16 бит, из которых 4 бита - целая часть, 12 - дробная.

Масштабирование сэмплов требует наличия минимальной интерполяции.
В качестве таковой я выбрал линейную, как самую неприхотливую в реализации, но дающую неплохие результаты.
Работает она так. Надо провести прямую между текущей выборкой и предыдущей, взять точку, находящуюся на этой прямой по Х координате, соответствующей положению указателя проигрывания, при этом Y координата и будет значением для ЦАП-а. Криво, но мило.

Нетривиальной задачей оказалось определиться с методом смешивания каналов в выходное стерео.
Выборки всех каналов приводятся к знаковому виду и суммируются в сумматоре достаточной разрядности.
Сумматор умножается на значение выходной громкости разрядностью 8 бит, таким образом, что 128 дает коэффициент умножения 1, 64 - 0,5 и т.д.
По умолчанию для ХМ используется значение 48, что дает 37% громкости одного канала, или понижение уровня на 12дБ.
Результат суммирования 32 каналов вопреки ожиданиям превышает динамический диапазон одного канала не в 32 раза, а только в 4 (проверено на реальных модулях).
Возможна ситуация, когда амплитуды всех каналов сложатся и произойдет овердрайв, но в реальности это происходит крайне редко.
Для таких модулей можно просто уменьшить выходную громкость.

О плеере.
Учитывая относительную небыстрость процессора, большую часть параметров, используемых при работе, целесообразно рассчитать заранее.
Предусмотрена процедура инициализации плеера под требуемую аудиочастоту и модуль.
При этом рассчитываются:
- длины тиков для всех BPM в диапазоне 32-255,
- значения инкрементов для каждого полутона.

В сумме: данное железо потенциально способно проигрывать любой формат трекерной музыки - все зависит от плеера.
Количество каналов ограничено 36 по размеру таблицы (512/14~=36), но потенциально можно успевать играть больше.
Кроме самой музыки можно использовать до чертовой бабушки каналов под спецэффекты в играх.
